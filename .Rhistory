library(stats)
train=read.csv("C:\\Users\\Acer\\Desktop\\Stat 208\\HW #12 Spam Data Set for 208.csv",header = TRUE)
#Standardizing variables in each row:
f.standard = function(x){return((x-mean(x))/sd(x))}
train[1:57]= sapply(train[1:57],f.standard)
#This is the data set that we want to cluster without the labels
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all[-test.ind]
all
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all.ind[-test.ind]
knn.predict(train.ind,test.ind,train[58],k=35)
?knn
knn(train[,train.ind],train[,test.ind],train[58],k=35)
train[train.ind,1:57]
train=read.csv("C:\\Users\\Acer\\Desktop\\Stat 208\\HW #12 Spam Data Set for 208.csv",header = TRUE)
#Standardizing variables in each row:
f.standard = function(x){return((x-mean(x))/sd(x))}
train[1:57]= sapply(train[1:57],f.standard)
#This is the data set that we want to cluster without the labels
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all.ind[-test.ind]
knn(train[train.ind,1:57],train[test.ind,1:57],train[,58],k=35)
library(MASS)
library(class)
library(tm)
library(SnowballC)
library(wordcloud)
library(e1071)
library(cluster)
library(stats)
train=read.csv("C:\\Users\\Acer\\Desktop\\Stat 208\\HW #12 Spam Data Set for 208.csv",header = TRUE)
#Standardizing variables in each row:
f.standard = function(x){return((x-mean(x))/sd(x))}
train[1:57]= sapply(train[1:57],f.standard)
#This is the data set that we want to cluster without the labels
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all.ind[-test.ind]
knn(train[train.ind,1:57],train[test.ind,1:57],train[,58],k=35)
knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=35)
table(train[test.ind,58],results)
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=35)
table(train[test.ind,58],results)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
print(confusion)
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
Error.Rate
calc.OER = function(k){
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=35)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
}
testing.ks = sapply(1:100,calc.OER)
calc.OER = function(k){
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=35)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
return(Error.Rate)
}
testing.ks = sapply(1:100,calc.OER)
plot(testing.ks)
min(testing.ks)
?which
which(testing.ks==min(testing.ks))
#Loading in libraries that might be useful
library(MASS)
library(class)
library(tm)
library(SnowballC)
library(wordcloud)
library(e1071)
library(cluster)
library(stats)
train=read.csv("C:\\Users\\Acer\\Desktop\\Stat 208\\HW #12 Spam Data Set for 208.csv",header = TRUE)
#Standardizing variables in each row:
f.standard = function(x){return((x-mean(x))/sd(x))}
train[1:57]= sapply(train[1:57],f.standard)
#This is the data set that we want to cluster without the labels
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all.ind[-test.ind]
# calc.OER = function(k){
#   results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = #train[train.ind,58],k=k)
#   confusion = table(train[test.ind,58],results)
#   colnames(confusion)<-c("Predicted=-1","Predicted=1")
#   rownames(confusion)<-c("True=-1","True=1")
#   FP = confusion[2,1]
#   TP = confusion[2,2]
#   FN = confusion[1,2]
#   TN = confusion[1,1]
#   #Calculating the False Positive:
#   FPR = FP/(FP+TN)
#   FNR = FN/(FN+TN)
#   Error.Rate = (FP+FN)/(FP+FN+TP+TN)
#   return(Error.Rate)
# }
# testing.ks = sapply(1:100,calc.OER)
calc.OER = function(k){
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=k)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
return(Error.Rate)
}
calc.OER = function(k){
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=k)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
return(Error.Rate)
}
testing.ks = sapply(1:100,calc.OER)
testing.ks
plot(testing.ks)
min(testing.ks)
which(testing.ks==min(testing.ks))
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=3)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
print(confusion)
calc.OER(3)
file.choose()
?Corpus
lr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Lisa")
nr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Nathanael")
docs = Corpus(DirSource(lr.dir))
docs
summary(docs)
inspect(docs[1])
inspect(docs[2])
inspect(docs[3])
lr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Lisa")
nr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Nathanael")
docs = Corpus(DirSource(lr.dir))
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,content_transformer(tolower))
docs<-tm_map(docs,removePunctuation)
docs<-tm_map(docs,removeWords,c(stopwords("english")))
docs<-tm_map(docs,stripWhitespace)
# docs<-tm_map(docs,stemDocument)
word.docs<-DocumentTermMatrix(docs)
freq.docs<-sort(colSums(as.matrix(word.docs)),decreasing=TRUE)
print(freq.docs)
wordcloud(names(freq.docs),freq.docs,min.freq=2,max.words=60)
lr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Lisa")
nr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Nathanael")
docs = Corpus(DirSource(lr.dir))
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,content_transformer(tolower))
docs<-tm_map(docs,removePunctuation)
docs<-tm_map(docs,removeWords,c(stopwords("english")))
docs<-tm_map(docs,stripWhitespace)
# docs<-tm_map(docs,stemDocument)
word.docs<-DocumentTermMatrix(docs)
freq.docs<-sort(colSums(as.matrix(word.docs)),decreasing=TRUE)
print(freq.docs)
wordcloud(names(freq.docs),freq.docs,min.freq=2,max.words=60)
lr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Lisa")
nr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Nathanael")
docs = Corpus(DirSource(lr.dir))
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,content_transformer(tolower))
docs<-tm_map(docs,removePunctuation)
docs<-tm_map(docs,removeWords,c(stopwords("english")))
docs<-tm_map(docs,stripWhitespace)
# docs<-tm_map(docs,stemDocument)
word.docs<-DocumentTermMatrix(docs)
freq.docs<-sort(colSums(as.matrix(word.docs)),decreasing=TRUE)
wordcloud(names(freq.docs),freq.docs,min.freq=2,max.words=20)
?Corpus
docs2 = Corpus(DirSource(nr.dir))
docs2<-tm_map(docs2,removeNumbers)
docs2<-tm_map(docs2,content_transformer(tolower))
docs2<-tm_map(docs2,removePunctuation)
docs2<-tm_map(docs2,removeWords,c(stopwords("english")))
docs2<-tm_map(docs2,stripWhitespace)
# docs<-tm_map(docs,stemDocument)
word.docs2<-DocumentTermMatrix(docs2)
freq.docs2<-sort(colSums(as.matrix(word.docs2)),decreasing=TRUE)
wordcloud(names(freq.docs2),freq.docs,min.freq=2,max.words=20)
lr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Lisa")
nr.dir = file.path("C:/Users/Acer/Desktop/Stat 208","Nathanael")
docs = Corpus(DirSource(lr.dir))
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,content_transformer(tolower))
docs<-tm_map(docs,removePunctuation)
docs<-tm_map(docs,removeWords,c(stopwords("english")))
docs<-tm_map(docs,stripWhitespace)
# docs<-tm_map(docs,stemDocument)
word.docs<-DocumentTermMatrix(docs)
freq.docs<-sort(colSums(as.matrix(word.docs)),decreasing=TRUE)
wordcloud(names(freq.docs),freq.docs,min.freq=2,max.words=30)
docs2 = Corpus(DirSource(nr.dir))
docs2<-tm_map(docs2,removeNumbers)
docs2<-tm_map(docs2,content_transformer(tolower))
docs2<-tm_map(docs2,removePunctuation)
docs2<-tm_map(docs2,removeWords,c(stopwords("english")))
docs2<-tm_map(docs2,stripWhitespace)
# docs<-tm_map(docs,stemDocument)
word.docs2<-DocumentTermMatrix(docs2)
freq.docs2<-sort(colSums(as.matrix(word.docs2)),decreasing=TRUE)
wordcloud(names(freq.docs2),freq.docs,min.freq=2,max.words=30)
?wordcloud
train[1,]
train$target
FPR
FNR
set.seed(47)
train=read.csv("C:\\Users\\Acer\\Desktop\\Stat 208\\HW #12 Spam Data Set for 208.csv",header = TRUE)
#Standardizing variables in each row:
f.standard = function(x){return((x-mean(x))/sd(x))}
train[1:57]= sapply(train[1:57],f.standard)
#This is the data set that we want to cluster without the labels
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all.ind[-test.ind]
calc.OER = function(k){
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=k)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
return(Error.Rate)
}
testing.ks = sapply(1:100,calc.OER)
plot(testing.ks)
which(testing.ks==min(testing.ks))
set.seed(3)
train=read.csv("C:\\Users\\Acer\\Desktop\\Stat 208\\HW #12 Spam Data Set for 208.csv",header = TRUE)
#Standardizing variables in each row:
f.standard = function(x){return((x-mean(x))/sd(x))}
train[1:57]= sapply(train[1:57],f.standard)
#This is the data set that we want to cluster without the labels
all.ind = 1:4601
test.ind =sample(1:4601,920)
train.ind = all.ind[-test.ind]
calc.OER = function(k){
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=k)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
return(Error.Rate)
}
testing.ks = sapply(1:100,calc.OER)
plot(testing.ks)
which(testing.ks==min(testing.ks))
results = knn(train = train[train.ind,1:57],test = train[test.ind,1:57],cl = train[train.ind,58],k=10)
confusion = table(train[test.ind,58],results)
colnames(confusion)<-c("Predicted=-1","Predicted=1")
rownames(confusion)<-c("True=-1","True=1")
print(confusion)
FP = confusion[2,1]
TP = confusion[2,2]
FN = confusion[1,2]
TN = confusion[1,1]
#Calculating the False Positive:
FPR = FP/(FP+TN)
FNR = FN/(FN+TN)
Error.Rate = (FP+FN)/(FP+FN+TP+TN)
Error.Rate
FPR
FNR
getwd()
setwd()
?setwd()
?getSrcDirectory
getSrcDirectory(pulsar.R)
getSrcDirectory("pulsar.R")
getSrcDirectory("~pulsar.R")
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
scriptPath()
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
d
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
getwd()
read.csv2("pulsar_stars.csv")
df =read.csv2("pulsar_stars.csv")
df
View(df)
?read.csv
df =read.csv("pulsar_stars.csv")
df
View(df)
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
dist(1)
c(1,2,3)
dist(c(1,2,3))
plot(density(pulsar$Mean.of.the.integrated.profile))
colnames(pulsar)
par(mfrow=c(4, 4))
colnames <- colnames(pulsar)
for (i in 1:8) {
d <- density(pulsar[,i])
plot(d, type="n", main=colnames[i])
polygon(d, col="blue", border="gray")
}
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(which(pulsar$target_class==1),pulsar[,i])
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
i
plot(d.pos, type="n", main=colnames[i])
?lines
plot()
plot(d.pos)
lines(d.neg)
paste("positive","yes")
par(mfrow=c(2, 2))
colnames <- colnames(pulsar)
for (i in 1:8) {
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
plot(d.pos, type="n", main=paste("Positive Density",colnames[i]))
polygon(d, col="blue", border="gray")
plot(d.neg, type="n", main=paste("Negative Density",colnames[i]))
polygon(d, col="red", border="gray")
}
par(mfrow=c(1, 2))
colnames <- colnames(pulsar)
for (i in 1:8) {
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
plot(d.pos, type="n", main=paste("Positive Density",colnames[i]))
polygon(d, col="blue", border="gray")
plot(d.neg, type="n", main=paste("Negative Density",colnames[i]))
polygon(d, col="red", border="gray")
}
colnames(pulsar)
par(mfrow=c(1, 2))
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
plot(d.pos, type="n", main=paste("Positive Density",colnames[i]))
polygon(d, col="blue", border="gray")
plot(d.neg, type="n", main=paste("Negative Density",colnames[i]))
polygon(d, col="red", border="gray")
}
#Reading the data into our R envrionment and setting up the data is done here
pulsar = read.csv("pulsar_stars.csv")
pulsar = pulsar[order(pulsar$target_class),]
#Drawing some plots to look at the density of the covariates
par(mfrow=c(1, 2))
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
plot(d.pos, type="n", main=paste("Positive Density",colnames[i]))
polygon(d, col="blue", border="gray")
plot(d.neg, type="n", main=paste("Negative Density",colnames[i]))
polygon(d, col="red", border="gray")
}
pulsar = read.csv("pulsar_stars.csv")
pulsar
par(mfrow=c(1, 2))
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
hist(d.pos, type="n", main=paste("Positive Density",colnames[i]))
polygon(d, col="blue", border="gray")
hist(d.neg, type="n", main=paste("Negative Density",colnames[i]))
polygon(d, col="red", border="gray")
}
?hist
#Drawing some plots to look at the density of the covariates
par(mfrow=c(1, 2))
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos <- density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
hist(d.pos, main=paste("Positive Density",colnames[i]))
hist(d.neg,main=paste("Negative Density",colnames[i]))
}
d.pos
#Drawing some plots to look at the density of the covariates
par(mfrow=c(1, 2))
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos <- pulsar[which(pulsar$target_class==1),i]
d.neg = pulsar[which(pulsar$target_class==0),i]
hist(d.pos, main=paste("Positive Density",colnames[i]))
hist(d.neg,main=paste("Negative Density",colnames[i]))
}
?hist
hist(d.pos, density=TRUE, main=paste("Positive Density",colnames[i]))
for (i in 1:8) {
d.pos = density(pulsar[which(pulsar$target_class==1),i])
d.neg = density(pulsar[which(pulsar$target_class==0),i])
hist(pulsar[which(pulsar$target_class==1),i], probability =TRUE, main=paste("Positive Density",colnames[i]))
hist(pulsar[which(pulsar$target_class==1),i],probability = TRUE,main=paste("Negative Density",colnames[i]))
}
#Drawing some plots to look at the density of the covariates
par(mfrow=c(1, 2))
ps = which(pulsar$target_class==1)
nps = which(pulsar$target_class==0)
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos = density(ps[,i])
d.neg = density(nps[,i])
hist(ps[,i], probability =TRUE, main=paste("Positive Density",colnames[i]))
lines(d, col="red")
hist(nps[,i],probability = TRUE,main=paste("Negative Density",colnames[i]))
lines(d, col="red")
}
par(mfrow=c(1, 2))
ps = pulsar[which(pulsar$target_class==1),]
nps = pulsar[which(pulsar$target_class==0),]
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos = density(ps[,i])
d.neg = density(nps[,i])
hist(ps[,i], probability =TRUE, main=paste("Positive Density",colnames[i]))
lines(d, col="red")
hist(nps[,i],probability = TRUE,main=paste("Negative Density",colnames[i]))
lines(d, col="red")
}
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
source('C:/Users/Acer/Tutorials/PulsarStars-Project/pulsar.R')
par(mfrow=c(1, 2))
ps = pulsar[which(pulsar$target_class==1),]
nps = pulsar[which(pulsar$target_class==0),]
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew DM SNR","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos = density(ps[,i])
d.neg = density(nps[,i])
hist(ps[,i], probability =TRUE, main=paste("Positive Density",colnames[i]))
lines(d, col="red")
hist(nps[,i],probability = TRUE,main=paste("Negative Density",colnames[i]))
lines(d, col="red")
}
colnames(pulsar)
#Drawing some plots to look at the density of the covariates
par(mfrow=c(1, 2))
ps = pulsar[which(pulsar$target_class==1),]
nps = pulsar[which(pulsar$target_class==0),]
colnames <- c("Mean IP","SD IP", "Excess Kurtosis IP", "Skew IP","Mean DM SNR","SD DM SNR", "Excess Kurtosis DM SNR", "Skew DM SNR")
for (i in 1:8) {
d.pos = density(ps[,i])
d.neg = density(nps[,i])
hist(ps[,i], probability =TRUE, main=paste("Positive Density",colnames[i]))
lines(d, col="red")
hist(nps[,i],probability = TRUE,main=paste("Negative Density",colnames[i]))
lines(d, col="red")
}
